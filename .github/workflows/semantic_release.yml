name: Release
on:
  push:
    branches:
      - main
      - beta
      - mongo
      - "*.x"
env:
  flutter_version: "3.0.x"
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 50
    env:
      GH_PERSONNAL_TOKEN: ${{secrets.GH_PERSONNAL_TOKEN}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Elixir
        uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
        with:
          elixir-version: "1.12"
          otp-version: "24"
      - name: Install Flutter & Dependencies
        uses: subosito/flutter-action@v1.5.3
        with:
          flutter-version: ${{ env.flutter_version }}
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: |
            ${{ secrets.LENRA_UI_RUNNER_SSH }}
            ${{ secrets.CLIENT_APP_SSH }}
            ${{ secrets.CLIENT_COMMON_SSH }}
            ${{ secrets.LENRA_COMPONENTS_SSH }}
      - name: Build Flutter Web
        run: |
          cd client
          flutter build web
          cd ..
      - name: Deps + compile elixir
        run: |
          cd server
          mix deps.get
          mix compile
          cd ..
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker build
        uses: actions/cache@v2
        with:
          path: ~/.docker-cache
          key: ${{ runner.os }}-docker
      - name: Get Version
        id: get-version
        uses: shiipou/sem-release@stable
        with: 
          RELEASE_BRANCHES_REGEX: '^(main)$'
          PRERELEASE_BRANCHES_REGEX: '^(beta|mongo)$'
          ALLOW_FAILURE: false

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.get-version.outputs.WILL_RELEASE == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.VERSION }}
          release_name: v${{ steps.get-version.outputs.VERSION }}
          body: |
            v${{ steps.get-version.outputs.VERSION }}
          draft: false
          prerelease: ${{ steps.get-version.outputs.IS_PRE_RELEASE }}
      - name: Release Docker
        id: release
        if: steps.get-version.outputs.WILL_RELEASE == 'true'
        env:
          DOCKER_IMAGE: lenra/devtools
        run: .github/release.sh ${{ steps.get-version.outputs.VERSION }}
